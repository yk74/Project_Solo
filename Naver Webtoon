from urllib.request import urlopen from bs4 import BeautifulSoup import pandas as pd

## 네이버 웹툰 홈페이지 주소 지정
html=urlopen("https://comic.naver.com/webtoon/weekday.nhn") soup=BeautifulSoup(html,'html.parser')

## 추출할 클래스 지정
X = soup.find_all("div", {"class": "thumb"})

Title = [] Site = [] Week = []

## 웹툰 제목,요일,상세페이지 추출
for i in X: title = i.img.get("alt") Title.append(title)

for i in X: site = i.a.get("href") week = site[-3:] Week.append(week) Site.append(site)

print(Title) print(Week)

## 웹툰 제목과 요일 개수 일치하는지 확인
print(len(Week)) print(len(Title))

## 요일별 웹툰 리스트 생성
Title_1=[] Title_2=[] Title_3=[] Title_4=[] Title_5=[] Title_6=[] Title_7=[]

## 웹툰 요일별 분류
for i in range(len(Week)): x=Title[i] if Week[i] == 'mon':
Title_1.append(x) elif Week[i] == 'tue':
Title_2.append(x) elif Week[i] == 'wed':
Title_3.append(x) elif Week[i] == 'thu':
Title_4.append(x) elif Week[i] == 'fri':
Title_5.append(x) elif Week[i] == 'sat':
Title_6.append(x) else : Title_7.append(x)

## 요일별 웹툰 분류 확인
Title_3

from selenium import webdriver
from selenium.webdriver.common.keys import Keys

url='https://comic.naver.com/webtoon/weekday.nhn'
url = "https://comic.naver.com" driver=webdriver.Chrome('C:/chromedriver.exe')

Genre = []

## 웹툰별 상세페이지에서 장르 추출
for i in range(len(Title)): link = url + Site[i] driver.get(link)

html = driver.page_source
soup = BeautifulSoup(html,'html.parser')

genre = soup.find("span",{"class":"genre"}).text
Genre.append(genre)
print(Genre)

## 장르 개수 확인
len(Genre)

## 요일별 장르 리스트 생성
Genre_1=[] Genre_2=[] Genre_3=[] Genre_4=[] Genre_5=[] Genre_6=[] Genre_7=[]

## 장르 요일별 분류
for i in range(len(Genre)): x=Genre[i] if Week[i] == 'mon':
Genre_1.append(x) elif Week[i] == 'tue':
Genre_2.append(x) elif Week[i] == 'wed':
Genre_3.append(x) elif Week[i] == 'thu':
Genre_4.append(x) elif Week[i] == 'fri':
Genre_5.append(x) elif Week[i] == 'sat':
Genre_6.append(x) else : Genre_7.append(x)

## 요일별 웹툰 장르와 제목 개수 확인
print(len(Genre_7)) print(len(Title_7))

## 요일별 웹툰 장르와 제목 개수 확인
print(len(Genre_7)) print(len(Title_7))

## 요일별 점수 리스트 생성
Score_1=[] Score_2=[] Score_3=[] Score_4=[] Score_5=[] Score_6=[] Score_7=[]

## 인기 순위에 따라 점수 부여 - 1위:n점 ~ n위:1점
for i in range(len(Genre_1),0,-1): Score_1.append(i) for i in range(len(Genre_2),0,-1): Score_2.append(i) for i in range(len(Genre_3),0,-1): Score_3.append(i) for i in range(len(Genre_4),0,-1): Score_4.append(i) for i in range(len(Genre_5),0,-1): Score_5.append(i) for i in range(len(Genre_6),0,-1): Score_6.append(i) for i in range(len(Genre_7),0,-1): Score_7.append(i)

print(Score_7)

## 계산작업이 끝난 데이터 다시 병합
G = Genre_1 + Genre_2 + Genre_3 + Genre_4 + Genre_5 + Genre_6 + Genre_7 S = Score_1 + Score_2 + Score_3 + Score_4 + Score_5 + Score_6 + Score_7

## 데이터프레임 생성
df_G = pd.DataFrame(G,columns=['장르']) df_S = pd.DataFrame(S,columns=['점수'])

## 데이터프레임 병합
result = pd.concat([df_G,df_S],axis=1)

result.head(10)

## 장르별 점수 합
result1 = pd.pivot_table(result, index = ['장르'], values = ['점수'], aggfunc='sum')
Result1 = result1.sort_values(by = '점수', ascending= False)

## 장르별 작품 개수
result2 = pd.pivot_table(result, index = ['장르'], values = ['점수'], aggfunc='count')
Result2 = result2.sort_values(by = '점수', ascending= False)

Result = pd.merge(Result1, Result2, left_index=True, right_index=True, how='left')

## 평균 점수 칼럼 생성
def mean_score (data):    
    Result['평균 점수'] = Result['점수_x'] / Result['점수_y'] 
    return Result

Result = mean_score(Result)
Result = Result.drop(['점수_x','점수_y'],axis=1)
Result = Result.astype({'평균 점수': 'int'})
Result = Result.sort_values(by = '평균 점수', ascending= False)

Result

import matplotlib.pyplot as plt
import seaborn as sns
import platform 
from matplotlib import font_manager, rc

## 한글 폰트 사용
if platform.system() == 'Windows': 
    path = 'c:/Windows/Fonts/malgun.ttf'
    font_name = font_manager.FontProperties(fname=path).get_name()
    rc('font', family=font_name)
elif platform.system() == 'Darwin':
    rc('font', family='AppleGothic')
    
## 장르별 평균 점수 시각화
Result = Result.reset_index()  #'장르' 인덱스 -> 컬럼

plt.figure(figsize=(5, 15))
sns.barplot(Result['평균 점수'], Result['장르'])
